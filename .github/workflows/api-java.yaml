name: api_seguridad - java
on:
#  pull_request:
#    branches: [ tatiana2 ]
#    paths:
#      - 'Backend/api_seguridad/src/**'
#      - '.github/workflows/api-seguridad-workflow.yaml'
#  push:
#    branches: [ tatiana2 ]
#    paths:
#      - 'Backend/api_seguridad/src/**'
#      - '.github/workflows/api-seguridad-workflow.yaml'

  push:
    branches:
      - tatiana2


jobs:
  project-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Backend/api_seguridad

    steps:
      - uses: actions/checkout@v3
      - name: show folder tree
        run: |
          ls

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      
      - name: Setup Gradle 7
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 7.6.1
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Establecer variables de entorno
        env:
          SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/alexa
          SPRING_DATASOURCE_USERNAME: prueba
          SPRING_DATASOURCE_PASSWORD: prueba
      - name: Execute Gradle "cleanTest test"
        run: ./gradlew cleanTest test

  docker-build:
    if: ${{ github.ref == 'refs/heads/tatiana2' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Backend/api_seguridad
    needs:
      - project-build
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Setup Gradle 7
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 7.6.1
      
      - name: Execute Gradle "cleanTest test"
        run: ./gradlew bootJar

      - name: Login to Public ECR
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Build Docker image
        run: docker build -t public.ecr.aws/u8j8i3w5/imperio-public-registry:api-java-latest -f Backend/api_seguridad/Dockerfile Backend/api_seguridad/  # Build image

      - name: Tag Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: docker tag public.ecr.aws/u8j8i3w5/imperio-public-registry:api-java-latest public.ecr.aws/u8j8i3w5/imperio-public-registry:api-java-latest

      - name: Push Docker image to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: docker push public.ecr.aws/u8j8i3w5/imperio-public-registry:api-java-latest

#  deploy:
#    if: ${{ github.ref == 'refs/heads/main' }}
#    runs-on: ubuntu-latest
#    needs:
#      - docker-build
#    steps:
#      - uses: actions/checkout@v3
#      - name: Add Server key
#        run: |
#          touch key.txt && echo "${{ secrets.SERVER_KEY }}" > key.txt
#          chmod 600 key.txt
#      - name: Deploy the application
#        env:
#          SERVER_HOST: ${{ secrets.SERVER_HOST }}
#          SERVER_PORT: ${{ secrets.SERVER_PORT }}
#          SERVER_USER: ${{ secrets.SERVER_USER }}
#        run: |
#          set -e
#          ./deploy.sh
